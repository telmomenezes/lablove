#ifndef QUICKGUISHEET_H
#define QUICKGUISHEET_H

#include "QuickGUIPanel.h"
#include "QuickGUIWindow.h"

namespace QuickGUI
{
	/** Represents a transparent area for holding widgets.
		@remarks
		The Sheet class is derived from a Window, although it
		differs because it is the size of the screen.  
		In addition, the Sheet class can create Windows.
	*/
	class Sheet :
		public Panel
	{
	public:
		/** Constructor
            @param
                name The name to be given to the widget (must be unique).
			@note
				If you want a transparent background, pass "" as the material.
        */
		Sheet(const Ogre::String& name, const Ogre::String& material);
		virtual ~Sheet();

		/**
		* Internal method that sets the pixel location and size of the widget.
		*/
		void _applyDimensions();

		/** Create a Window with material, borders, and TitleBar
            @param
                dimensions The relative x Position, y Position, width, and height of the window.
			@param
                material Ogre material to define the Window image.
			@param
				toggle visibility.
			@note
				Name for window will be autogenerated. (Convenience method)
        */
		Window* createWindow(const Ogre::Vector4& dimensions, const Ogre::String& material);
		/** Create a Window with material, borders, and TitleBar
			@param
				name Window name, must be unique.
            @param
                dimensions The relative x Position, y Position, width, and height of the window.
			@param
                material Ogre material to define the Window image.
        */
		Window* createWindow(const Ogre::String& name, const Ogre::Vector4& dimensions, const Ogre::String& material);
		/** Create a Window with material, borders, and TitleBar
			@param
				name Window name, must be unique.
            @param
                dimensions The relative x Position, y Position, width, and height of the window.
			@note
				Default Skin material for windows will be applied.
        */
		Window* createWindow(const Ogre::String& name, const Ogre::Vector4& dimensions);
		/** Create a Window with material, borders, and TitleBar
            @param
                dimensions The relative x Position, y Position, width, and height of the window.
			@note
				Name for window will be autogenerated. (Convenience method)
			@note
				Default Skin material for windows will be applied.
        */
		Window* createWindow(const Ogre::Vector4& dimensions);
		
		Ogre::String getDefaultFont();
		Ogre::ColourValue getDefaultTextColor();
		Ogre::Real getDefaultCharacterHeight();
		Ogre::String getDefaultSkin();
		Ogre::OverlayContainer* getMenuContainer();
		int getMenuOverlayZOrder();
		Window* getWindow(const Ogre::String& name);

		void destroyWindow(const Ogre::String& name);
		void destroyWindow(Window* w);

		/**
		* Sets the window to have the highest zOrder (shown on top of all other windows)
		*/
		void setActiveWindow(Window* w);
		void setDefaultFont(const Ogre::String& font);
		void setDefaultTextColor(const Ogre::ColourValue& color);
		void setDefaultCharacterHeight(const Ogre::Real& height);
		/**
		* Sets the default skin, used for widgets with no specified material.
		*/
		void setDefaultSkin(const Ogre::String& skin);

	protected:
		Ogre::Overlay* mOverlay;

		int	mAutoNameWindowCounter;
		// List of windows according to z-order.  highest z-order in front of list
        std::list<Window*> mWindows;

		Ogre::String mDefaultSkin;
		Ogre::String mDefaultFont;
		Ogre::ColourValue mDefaultTextColor;
		Ogre::Real mDefaultCharacterHeight;

		Ogre::Overlay* mMenuOverlay;
		Ogre::OverlayContainer* mMenuContainer;
		int mMenuOverlayZOrder;

		Menu* _createMenu(const Ogre::String& name, const Ogre::Vector4& dimensions, const Ogre::String& material);

		/** Create a Window with material, borders, and TitleBar
            @param
                name The name to be given to the Window (must be unique).
            @param
                dimensions The relative x Position, y Position, width, and height of the window.
			@param
                material Ogre material to define the Window image.
			@param
				toggle visibility.
			@note
				Private function preventing users from setting the Widget Instance Name.  Names
				can be given to Windows using the "setReferenceName()" function.
        */
		Window* _createWindow(const Ogre::String& name, const Ogre::Vector4& dimensions, const Ogre::String& material);

		/**
		* Iterates Window List, and adjusts zOrder of Windows.  Empty Windows are not adjusted.
		* This is to ensure that the most of the 0-650 zOrder range can be used, especially when
		* deleting and creating a lot of Windows.
		*/
		void sortListByWindowZOrder();
	};
}

#endif
