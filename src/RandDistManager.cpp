/*
 * LOVE Lab
 * Copyright (C) 2007 Telmo Menezes.
 * telmo@telmomenezes.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the version 2 of the GNU General Public License 
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "RandDistManager.h"

#include <stdexcept>

// These seeds where generated by random.org
// Using the "integer number generator"
// Timestamp: 2007-05-14 10:56:01 GMT
unsigned int randomizerSeeds[] = {41864960, 19381163, 13967967, 20867833, 24991944, 48528930, 52743240, 21377347, 99577759, 18957050, 79044910, 71079322, 86731328, 364209, 82397045, 63220919, 90785792, 90322487, 55388521, 15197402, 35166669, 58900873, 35309788, 69420298, 87684690, 86185780, 38094943, 74287855, 76292981, 99437521, 46512308, 53008515, 21871155, 25736538, 47893014, 28608200, 34752971, 37676000, 45288579, 24782397, 31391481, 93449915, 82980200, 23617923, 64049818, 32092029, 72239919, 90641525, 68897111, 45275222, 16427303, 55227103, 22089858, 21597676, 88608533, 69820162, 17495330, 6952979, 8497949, 37561071, 65505228, 58308990, 87738493, 25492541, 44245050, 85386885, 94139258, 17117355, 55595460, 26674752, 14313810, 54227473, 56633638, 67160468, 39283729, 18164697, 99520540, 5715714, 17022240, 60375332, 63377289, 72358423, 59988737, 47913035, 78500785, 21931612, 21646960, 17071711, 8520503, 76950677, 15501194, 84538157, 15731602, 34013741, 14772825, 38331246, 51770080, 66685629, 61438730, 13452203};

RandDistManager::RandDistManager()
{
    mSeedGenerator.seed();
}

RandDistManager::~RandDistManager()
{
    for (list<mt_distribution*>::iterator iterDist = mDistributions.begin();
            iterDist != mDistributions.end();
            iterDist++)
    {

        delete (*iterDist);
    }

    mDistributions.clear();
}

void RandDistManager::setSeedIndex(int index)
{
    if (index == -1)
    {
        mSeedGenerator.seed();
        setSeed(mSeedGenerator.lrand());
        return;
    }

    if ((index < 0) || (index >= 100))
    {
        throw std::runtime_error("Seed index must be between 0 and 99, or -1 for random seed.");
    }

    setSeed(randomizerSeeds[index]);
}

void RandDistManager::setSeed(unsigned long seed)
{
    mSeedGenerator.seed32new(seed);

    for (list<mt_distribution*>::iterator iterDist = mDistributions.begin();
            iterDist != mDistributions.end();
            iterDist++)
    {

        (*iterDist)->seed32new(mSeedGenerator.lrand());
    }
}

mt_distribution* RandDistManager::getNewDistribution()
{
    mt_distribution* dist = new mt_distribution();
    dist->seed32new(mSeedGenerator.lrand());
    mDistributions.push_back(dist);
    return dist;
}

